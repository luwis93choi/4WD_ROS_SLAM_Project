<launch>

<!--RPLidar node launch code-->
    <node name="rplidarNode" pkg="rplidar_ros" type="rplidarNode" output="screen">
        <!-- Change the device setting parameters according to current HW state -->
        <param name="serial_port" type="string" value="/dev/ttyUSB0"/>
        <param name="serial_baudrate" type="int" value="115200"/><!--A1/A2 -->
        <!--param name="serial_baudrate"     type="int"    value="256000"--><!--A3 -->

        <!-- *** Set frame_id as base_laser in order to bind RPLidar to base_laser TF ***-->
        <param name="frame_id" type="string" value="base_laser"/>   
        <!-- *** ROS and gmapping requires the location (TF) of Lidar in order to create the map *** -->
        <!-- *** As a result, it is important to bind RPLidar node to base_laser TF by assigning frame_id as base_laser *** -->
        
        <param name="inverted" type="bool" value="false"/>
        <param name="angle_compensate" type="bool" value="true"/>
    </node>
    <node name="lidar_node" pkg="slam_proto_v1" type="lidar_node">
    </node>

<!--USB Cam node launch code-->
    <node name="usb_cam_node" pkg="usb_cam" type="usb_cam_node">
        <!-- Change the device setting parameters according to current HW state -->
        <!-- In order to receive video stream from camera, appropriate format and codec settings have to be applied -->
        <param name="video_device" type="string" value="/dev/video3"/>
        <param name="pixel_format" type="string" value="yuyv"/>
    </node>
    <node name="cam_node" pkg="slam_proto_v1" type="cam_node">
    </node>

<!--Serial Communication node launch code-->
    <!--To launch python-based node, 'type' attribtue in <node> has to be 'filename.py'. This is due to ROS naming convetion.-->
    <node name="serial_port" pkg="rosserial_python" type="serial_node.py" output="screen">
        <!-- Change the device setting parameters according to current HW state -->
        <param name="port" value="/dev/ttyACM0"/>
        <param name="baud" value="57600"/>
        <!-- To adjust connection settings for rosserial, we have to access the setting values as 'param' attributes. -->
    </node>
    <node name="serial_RX_node" pkg="slam_proto_v1" type="serial_RX_node">
    </node>

<!--Transformation node launch code-->
<!--
    <node name="tf_broadcaster" pkg="slam_proto_v1" type="tf_broadcaster">
    </node>
-->
<!--Gmapping node launch code-->
    <node name="slam_gmapping" pkg="gmapping" type="slam_gmapping">
        <param name="scan" value="/scan"/>
    </node>

<!--Ackermann Odom node launch code-->

    <node name="ackermann_odom_broadcaster" pkg="slam_proto_v1" type="ackermann_odom_broadcaster" output="screen">
    </node>
    
</launch>